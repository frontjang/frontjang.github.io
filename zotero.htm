<html>
<head>
<script src="https://d3js.org/d3.v4.js"></script>
</head>

<body>
<textarea id="dsa"></textarea>
<input type=button onclick="doUpdate('')" value="analyze">
<div id="asd" style="font-family:Ericsson Hilda"></div>

<script>
var uniqueNDSTitles=[];
nodes=[];
links=[];
var uniqueDates=[];
var treeData=[];
root=[];
var dateCount=[];
maximumY=1;
nodenum=0;	
	
function doUpdate(inp){
	var raw=document.getElementById("dsa").value;
	var data="";
	if(raw!="") data=JSON.parse(raw);
	else data=JSON.parse(inp);
	
	uniqueNDSTitles.push(data[0].title);
	processDate(data[0], uniqueDates);
	nodes.push({"id":data[0].title,"name":data[0].title,"date":data[0].date,"y":0,"datex":getDateX(data[0]),"nodenum":nodenum++,"parent":null});
	var children=[];
	document.getElementById("asd").innerHTML+="<h1>Anatomy of "+data[0].title+"</h1>";
	
	for (i=1;i<data.length;i++){
		document.getElementById("asd").innerHTML+=getStr(data[i]);
		if(data[i].collection=="NDS"){
			if(data[i].date!=""){
				uniqueNDSTitles.push(data[i].title);
				var count=processDate(data[i], uniqueDates);
				if(count>maximumY)maximumY=count;
				nodes.push({"id":data[i].title,"name":data[i].title,"date":data[i].date,"y":count,"datex":getDateX(data[i]),"nodenum":nodenum++,"parent":data[0].title});
				links.push({"source":data[0].title,"target":data[i].title});
				children.push({"name":data[i].title,"parent":data[0].title,"children":null});
			}
		}
	}
	
	for (var dat of data){
		if(dat.collection=="NDS"){
			var isTouched=false;
			for (var da of dat.addition){
				if(da.title!=data[0].title){
					if(!isTouched) document.getElementById("asd").innerHTML+="<h3>"+dat.title+"</h3>";
					document.getElementById("asd").innerHTML+=getStr(da);	
					isTouched=true;

					if(uniqueNDSTitles.indexOf(da.title)<0) {
						uniqueNDSTitles.push(da.title);
						if(da.collection=="NDS"){
							if(da.date!=""){
								var count=processDate(da, uniqueDates);
								if(count>maximumY)maximumY=count;
								nodes.push({"id":da.title,"name":da.title,"date":data[0].date,"y":count,"datex":getDateX(da),"nodenum":nodenum++,"parent":dat.title});
								links.push({"source":dat.title,"target":da.title});
							}
						}
						
					}
					else {
						links.push({"source":dat.title,"target":da.title});
					}
				}
			}
		}
	}
	
	uniqueDates=uniqueDates.sort();
	
	var margin = {top: 20, right: 100, bottom: 20, left: 20},
	width = 1500 - margin.right - margin.left,
	height = 1500 - margin.top - margin.bottom;

	var svg = d3.select("body").append("svg")
	.attr("width", width + margin.right + margin.left)
	.attr("height", height + margin.top + margin.bottom)
	.append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
	
	xscale = d3.scalePoint()
	.domain(uniqueDates)         // This is what is written on the Axis: from 0 to 100
	.range([0, width - 100]);       // This is where the axis is placed: from 100 px to 800px	

	var yDomain=Array(nodenum+1).fill().map((_, i) => i);//*20);

	yscale = d3.scalePoint()
	.domain(yDomain)         // This is what is written on the Axis: from 0 to 100
	.range([height/2, 0]);

	var x_axis = d3.axisBottom()
        .scale(xscale);

	var y_axis = d3.axisLeft()
        .scale(yscale);
	
	var xAxisTranslate = height/2 + 10;

	svg.append("g")
        .attr("transform", "translate(50, " + xAxisTranslate  +")")
        .call(x_axis)

	var graph={nodes, links};

	var link = d3.linkHorizontal()
	.x(function(d) {
		var node=findNode(graph.nodes, d);
		var xs=xscale(getLatestDate(node))+50;
		var xy=yscale(node.nodenum+1)+10;
		return xs;
	})
	.y(function(d) {
		var node=findNode(graph.nodes, d);
		var xs=xscale(getLatestDate(node))+50;
		var xy=yscale(node.nodenum+1)+10;
		return xy;
	});	

	var paths=svg.append("g")
	.attr("class", "paths")
	.selectAll("g")
	.data(graph.links)
	.enter()
	.append("path")
	.attr("fill", "none")
	.attr("d", link)
	.attr("stroke", d => {
		if(d.source===nodes[0].id || d.target===nodes[0].id) return "black";
		else return "lightgray";
	}).style("opacity", .7);	
	
	var node = svg.append("g")
	.attr("class", "nodes")
	.selectAll("g")
	.data(graph.nodes)
	.enter().append("g")
	.attr("transform", d => {
		var xx=xscale(getLatestDate(d))
		var t=parseInt(d.nodenum)+1;
		var yy=yscale(t)
		if (yy==undefined) yy=0;
		return `translate(${xx+50}, ${yy+10})`;
	});

	var color = d3.scaleOrdinal(d3.schemeCategory20);

	var circles = node.append("circle")
	.attr("r", 5)
	.attr("fill", function(d) { return color(d.group); })
	
	var lables = node.append("text")
	.text(function(d) { return processLabel(d.id); })
	.attr('x', 0)
	.attr('y', 13).style("font-size", "34px");  
	
	node.append("title").text(function(d) { return d.id; });
}

function getStr(data){
	var result="";
	var url=(data['url']!="") ? "<a href='"+data['url']+"'>" : "";
	var title=data['title']
	var date= (data['date']!="") ? " ("+data['date']+")" : "";
	result=url+title+(url!=""?"</a>":"")+date+"<p/>";
	return result;
}
	
function processDate(input,target){
	var date=getLatestDate(input);
	if(target.indexOf(date)==-1) {
		target.push(date);
		dateCount[date]=0;
		return 0;
	}
	else if (date!=="") {
		dateCount[date]=dateCount[date]+1;
		return dateCount[date];
	}
	else return 0;
}

function getDateX(input){
	return uniqueDates.indexOf(getLatestDate(input));
}

function getLatestDate(input){
	if (input.date==="") return "";
	var arr=input.date.split(',');
	arr=arr.map(s => s.trim()).sort();
	var ret=arr[arr.length-1];
	if(ret) 	return arr[arr.length-1];
}

function processLabel(input){
	var arr=input.split(/[: \/]+/) ;
	return arr[0].trim();
}

function findNode(nodeList, nodeId){
	for (var dat of nodeList){
		if(dat.id==nodeId) return dat;	
	}
}	
</script>
</body>
</html>
