<!DOCTYPE html>
<html>
<head>
  <title>openmap</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<meta charset="utf-8"/>


<script
  src="https://code.jquery.com/jquery-3.2.1.min.js"
  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
  crossorigin="anonymous"></script>
<script src="http://maps.google.com/maps/api/js?key=AIzaSyAFlDQwXmt0QVXWOPkeYsqhpdvCkRebQp8"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.3/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
<script src='https://unpkg.com/leaflet.gridlayer.googlemutant@latest/Leaflet.GoogleMutant.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.5/bluebird.min.js"></script>

<style>
body {
    padding: 0;
    margin: 0;
}
html, body, #mapid {
    height: 100vh;
    width: 100vw;
}

.info { padding: 6px 8px; font: 14px/16px Arial, Helvetica, sans-serif; background: white; background: rgba(255,255,255,0.8); box-shadow: 0 0 15px rgba(0,0,0,0.2); border-radius: 5px; } 
.info h4 { margin: 0 0 5px; color: #777; }
.legend { padding: 6px 8px; text-align: left; line-height: 18px; color: #555; } 
.legend i { width: 18px; height: 18px; float: left; margin-right: 8px; opacity: 0.7; }
</style>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Optional theme -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

<link rel="stylesheet" href="https://rawgit.com/lvoogdt/Leaflet.awesome-markers/2.0/develop/dist/leaflet.awesome-markers.css">
<script src="https://rawgit.com/lvoogdt/Leaflet.awesome-markers/2.0/develop/dist/leaflet.awesome-markers.js"></script>

</head>
<body>
<div id="mapid"></div>

<script>
$.urlParam = function(name){
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    if (results==null){
       return "openmap_busan";
    }
    else{
       return results[1] || 0;
    }
}

var mymap = L.map('mapid').setView([35.159544, 129.155072], 13);
var roads = L.gridLayer.googleMutant({
    type: 'roadmap' // valid values are 'roadmap', 'satellite', 'terrain' and 'hybrid'
}).addTo(mymap);

var info = L.control();

info.onAdd = function (map) {
	this._div = L.DomUtil.create('div', 'info');
	this.update();
	return this._div;
};

info.update = function (props) {
	
	if(props){
		this._div.innerHTML = '<h4>'+props.category+ (props.detailCategory?('('+props.detailCategory+')'):'') +' 정보</h4>';
		this._div.innerHTML += '<a href='+props.blogUrl+' target=_blank>'+props.name+'</a>';
		this._div.innerHTML += (props.address?'<br />'+props.address:'')
		this._div.innerHTML += (props.popupContent?'<br /><i>'+props.popupContent+'</i>':'')
	} else {
		this._div.innerHTML += '마우스를 마커위에 올리세요';
	}
};

info.addTo(mymap);




var url="https://etherpad.wikimedia.org/p/openmap_genesis/export/txt"
openmap_genesis=""
$.ajax({
	jsonp: 'jsonp',
	url: url,
	type: "GET",
	success: function(data){
		openmap_genesis=eval(data);
		console.log(openmap_genesis);
		var legend = L.control({position: 'bottomright'});
		var labels = [];
		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend');
			for (var i = 0; i < openmap_genesis.length; i++) {
				labels.push("<a href='?target="+openmap_genesis[i][4]+"'>"+openmap_genesis[i][0]+"</a>");
			}

			div.innerHTML = labels.join('<br>');
			div.innerHTML = "<h4>지역 선택</h4>" + div.innerHTML;
			return div;
		};

		legend.addTo(mymap);
		 
	},
	error: function(jqXHR, textStatus, errorThrown) {
      console.log(jqXHR);
   }
});


bounds = new L.LatLngBounds();

var url="https://etherpad.wikimedia.org/p/openmapv2_busan/export/txt";
//https://etherpad.wikimedia.org/p/openmap_busan/export/txt
openmap_locData="";
$.ajax({
	jsonp: 'jsonp',
	url: url,
	type: "GET",
	success: function(data){
		eval("openmap_locData=("+data+");");
		console.log(openmap_locData);

		var myLayer = L.geoJSON(openmap_locData,
		{
			onEachFeature: onEachFeature,
			pointToLayer: function (feature, latlng) {
				return L.marker(latlng, {icon: getMarkerStyle(feature.properties)}).on('mouseover', updateInfo).on('dblclick', zoomToFeature);
			}
		}
		).addTo(mymap);
		//myLayer.addData(openmap_locData);
		mymap.fitBounds(bounds, { padding: [40, 40] });
		bounds='';
	},
	error: function(jqXHR, textStatus, errorThrown) {
      console.log(jqXHR);
   }
});

function getMarkerStyle(prop){
	switch (prop.category) {
		case '음식점': 
			switch (prop.detailCategory) {
				case '해산물': return L.AwesomeMarkers.icon({icon: 'cutlery', markerColor: 'blue'});
				case '한식': return L.AwesomeMarkers.icon({icon: 'cutlery', markerColor: 'darkgreen'});
				case '고기': return L.AwesomeMarkers.icon({icon: 'cutlery', markerColor: 'darkred'});
				case '일식': return L.AwesomeMarkers.icon({icon: 'cutlery', markerColor: 'orange'});
				case '레스토랑': return L.AwesomeMarkers.icon({icon: 'cutlery', markerColor: 'purple'});
			}
		case '숙박': 
			switch (prop.detailCategory) {
				case '호텔': return L.AwesomeMarkers.icon({icon: 'hotel', markerColor: 'silver'});
			}			
		case '카페': return L.AwesomeMarkers.icon({icon: 'leaf', markerColor: 'red'});
		case '주류': return L.AwesomeMarkers.icon({icon: 'glass', markerColor: 'cadetblue'});
		case '명소': return L.AwesomeMarkers.icon({icon: 'picture', markerColor: 'purple'});
		
		default: return L.AwesomeMarkers.icon({icon: 'marker', markerColor: 'black'});
	}
}


function onEachFeature(feature, layer) {
    // does this feature have a property named popupContent?
	if (feature.properties && feature.properties.name) {
		layer.bindPopup(feature.properties.name);
	}
	bounds.extend(layer._latlng);
}


function updateInfo(e){
	var locinfo=e.target.feature.properties;
	info.update(locinfo);
}

function zoomToFeature(e) {
	var bounds = new L.LatLngBounds();
	bounds.extend(e.latlng);
	mymap.fitBounds(bounds);
}
</script>
</body>
</html>
